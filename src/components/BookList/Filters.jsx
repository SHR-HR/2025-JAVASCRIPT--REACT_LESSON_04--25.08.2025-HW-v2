// Импортируем хук useId из React для генерации уникальных ID
import { useId } from 'react'
// Импортируем CSS-модуль для стилизации компонента
import styles from './BookList.module.scss'

// Компонент Filters для отображения и управления фильтрами книг
// Принимает все необходимые пропсы для работы с фильтрами
function Filters({
  query, onQueryChange,        // Поисковый запрос и обработчик его изменения
  minPages, maxPages,         // Минимальное и максимальное количество страниц
  onMinChange, onMaxChange,   // Обработчики изменения минимального и максимального количества страниц
  sortOrder, onSortChange,    // Порядок сортировки и обработчик его изменения
  onReset, onCopyLink,        // Обработчики сброса фильтров и копирования ссылки
}) {
  // Генерируем уникальные ID для полей формы (для accessibility)
  const idSearch = useId() // ID для поля поиска
  const idSort = useId()   // ID для селекта сортировки
  const idMin = useId()    // ID для поля минимального количества страниц
  const idMax = useId()    // ID для поля максимального количества страниц

  // Рендерим компонент фильтров
  return (
    // Основной контейнер фильтров
    <div className={styles.filters}>
      
      {/* Первая строка фильтров: поиск и сортировка */}
      <div className={styles.filterRow}>
        
        {/* Группа формы для поиска */}
        <div className="form-group">
          {/* Лейбл для поля поиска, связанный с помощью htmlFor */}
          <label htmlFor={idSearch}>Поиск по названию</label>
          {/* Поле ввода для поиска */}
          <input
            id={idSearch} // Связь с лейблом через ID
            type="text"   // Тип поля - текст
            value={query} // Текущее значение поискового запроса
            // Обработчик изменения: передаем новое значение в родительский компонент
            onChange={(e) => onQueryChange(e.target.value)}
            placeholder="Введите название книги..." // Подсказка в поле
            aria-label="Поиск книг по названию" // Дополнительное описание для accessibility
          />
        </div>

        {/* Группа формы для сортировки */}
        <div className="form-group">
          {/* Лейбл для селекта сортировки */}
          <label htmlFor={idSort}>Сортировка по страницам</label>
          {/* Выпадающий список для выбора порядка сортировки */}
          <select
            id={idSort} // Связь с лейблом через ID
            value={sortOrder} // Текущее значение порядка сортировки
            // Обработчик изменения: передаем новое значение в родительский компонент
            onChange={(e) => onSortChange(e.target.value)}
            aria-label="Порядок сортировки книг" // Описание для accessibility
          >
            {/* Опция сортировки по возрастанию */}
            <option value="asc">По возрастанию</option>
            {/* Опция сортировки по убыванию */}
            <option value="desc">По убыванию</option>
          </select>
        </div>
      </div>

      {/* Вторая строка фильтров: фильтрация по количеству страниц */}
      <div className={styles.filterRow}>
        
        {/* Группа формы для минимального количества страниц */}
        <div className="form-group">
          {/* Лейбл для поля минимального количества страниц */}
          <label htmlFor={idMin}>Минимум страниц</label>
          {/* Поле ввода для минимального количества страниц */}
          <input
            id={idMin} // Связь с лейблом через ID
            type="number" // Тип поля - число
            min="0" // Минимальное допустимое значение
            value={minPages} // Текущее значение минимального количества страниц
            onChange={onMinChange} // Обработчик изменения значения
            placeholder="От" // Подсказка в поле
            aria-label="Минимальное количество страниц" // Описание для accessibility
          />
        </div>

        {/* Группа формы для максимального количества страниц */}
        <div className="form-group">
          {/* Лейбл для поля максимального количества страниц */}
          <label htmlFor={idMax}>Максимум страниц</label>
          {/* Поле ввода для максимального количества страниц */}
          <input
            id={idMax} // Связь с лейблом через ID
            type="number" // Тип поля - число
            min="0" // Минимальное допустимое значение
            value={maxPages} // Текущее значение максимального количества страниц
            onChange={onMaxChange} // Обработчик изменения значения
            placeholder="До" // Подсказка в поле
            aria-label="Максимальное количество страниц" // Описание для accessibility
          />
        </div>
      </div>

      {/* Блок действий: кнопки сброса и копирования ссылки */}
      <div className={styles.actions}>
        {/* Кнопка сброса фильтров */}
        <button 
          className="btn btn--secondary" // CSS-классы для стилизации
          onClick={onReset} // Обработчик клика: сброс фильтров
          aria-label="Сбросить все фильтры" // Описание для accessibility
        >
          Сбросить фильтры {/* Текст кнопки */}
        </button>
        
        {/* Кнопка копирования ссылки */}
        <button 
          className="btn btn--primary" // CSS-классы для стилизации
          onClick={onCopyLink} // Обработчик клика: копирование ссылки
          aria-label="Скопировать текущую ссылку" // Описание для accessibility
        >
          Скопировать ссылку {/* Текст кнопки */}
        </button>
      </div>
    </div>
  )
}

// Экспортируем компонент для использования в других частях приложения
export default Filters



