// Импорт функций для работы с query-параметрами
import { parseQuery, stringifyQuery } from '../src/utils/query'

// Основной блок тестов для утилит работы с query-параметрами
describe('Query utilities', () => {
  
  // Группа тестов для функции parseQuery (парсинг строки запроса)
  describe('parseQuery', () => {
    
    // Тест: корректное парсинг всех параметров из строки запроса
    test('корректно парсит все параметры', () => {
      // Вызов функции parseQuery с тестовой строкой параметров
      const result = parseQuery('?q=react&min=300&max=500&order=desc')
      // Проверка что результат соответствует ожидаемому объекту
      expect(result).toEqual({
        q: 'react',        // Параметр поискового запроса
        min: '300',        // Минимальное количество страниц (в виде строки)
        max: '500',        // Максимальное количество страниц (в виде строки)
        order: 'desc'      // Порядок сортировки (по убыванию)
      })
    })

    // Тест: игнорирование пустых параметров при парсинге
    test('игнорирует пустые параметры', () => {
      // Вызов функции с строкой содержащей пустые параметры
      const result = parseQuery('?q=&min=300&max=&order=desc')
      // Проверка что пустые параметры игнорируются, а валидные - сохраняются
      expect(result).toEqual({
        min: '300',        // Только валидный числовой параметр
        order: 'desc'      // Валидный параметр сортировки
      })
    })

    // Тест: игнорирование некорректных числовых значений
    test('игнорирует некорректные числовые значения', () => {
      // Вызов функции с некорректными числовыми значениями
      const result = parseQuery('?q=test&min=abc&max=500&order=invalid')
      // Проверка что некорректные значения игнорируются
      expect(result).toEqual({
        q: 'test',         // Корректный строковый параметр
        max: '500'         // Корректный числовой параметр
        // Некорректные min='abc' и order='invalid' игнорируются
      })
    })

    // Тест: работа с пустой строкой запроса
    test('работает с пустой строкой', () => {
      // Вызов функции с пустой строкой
      const result = parseQuery('')
      // Проверка что возвращается пустой объект
      expect(result).toEqual({})
    })

    // Тест: валидация значений параметра order
    test('принимает только валидные значения order', () => {
      // Проверка что 'asc' (по возрастанию) принимается
      expect(parseQuery('?order=asc').order).toBe('asc')
      // Проверка что 'desc' (по убыванию) принимается
      expect(parseQuery('?order=desc').order).toBe('desc')
      // Проверка что невалидное значение игнорируется
      expect(parseQuery('?order=invalid')).toEqual({})
    })
  })

  // Группа тестов для функции stringifyQuery (формирование строки запроса)
  describe('stringifyQuery', () => {
    
    // Тест: формирование строки из всех полей объекта
    test('формирует строку из всех полей', () => {
      // Объект со всеми возможными параметрами фильтров
      const filters = {
        q: 'react',        // Поисковый запрос
        min: '300',        // Минимальное количество страниц
        max: '500',        // Максимальное количество страниц
        order: 'desc'      // Порядок сортировки (по убыванию)
      }
      // Формирование строки запроса из объекта
      const result = stringifyQuery(filters)
      // Проверка корректности сформированной строки
      expect(result).toBe('q=react&min=300&max=500&order=desc')
    })

    // Тест: игнорирование пустых полей при формировании строки
    test('игнорирует пустые поля', () => {
      // Объект с пустыми и заполненными полями
      const filters = {
        q: 'react',        // Заполненное поле
        min: '',           // Пустое поле (должно игнорироваться)
        max: '500',        // Заполненное поле
        order: 'asc'       // Заполненное поле (но asc - значение по умолчанию)
      }
      const result = stringifyQuery(filters)
      // Проверка что пустые и значения по умолчанию исключаются
      expect(result).toBe('q=react&max=500')
    })

    // Тест: исключение параметра order со значением по умолчанию (asc)
    test('не включает order=asc (по умолчанию)', () => {
      const filters = {
        q: 'test',         // Поисковый запрос
        order: 'asc'       // Значение сортировки по умолчанию
      }
      const result = stringifyQuery(filters)
      // Проверка что order=asc не включается в строку (как значение по умолчанию)
      expect(result).toBe('q=test')
    })

    // Тест: включение параметра order с не-дефолтным значением (desc)
    test('включает order=desc', () => {
      const filters = {
        q: 'test',         // Поисковый запрос
        order: 'desc'      // Не-дефолтное значение сортировки
      }
      const result = stringifyQuery(filters)
      // Проверка что order=desc включается в строку
      expect(result).toBe('q=test&order=desc')
    })

    // Тест: работа с пустым объектом фильтров
    test('работает с пустым объектом', () => {
      // Вызов функции с пустым объектом
      const result = stringifyQuery({})
      // Проверка что возвращается пустая строка
      expect(result).toBe('')
    })
  })

  // Группа круговых тестов (round-trip) для проверки согласованности функций
  describe('круговой тест', () => {
    
    // Тест: полный круг преобразований с полным набором параметров
    test('stringify(parse(x)) стабилен', () => {
      // Исходная строка параметров
      const original = 'q=react&min=300&max=500&order=desc'
      // Парсинг строки в объект
      const parsed = parseQuery('?' + original)
      // Формирование строки обратно из объекта
      const stringified = stringifyQuery(parsed)
      // Проверка что после преобразований получилась исходная строка
      expect(stringified).toBe(original)
    })

    // Тест: круг преобразований с частичным набором параметров
    test('круговой тест с пустыми значениями', () => {
      // Исходная строка с неполным набором параметров
      const original = 'q=test&max=400'
      // Парсинг и обратное преобразование
      const parsed = parseQuery('?' + original)
      const stringified = stringifyQuery(parsed)
      // Проверка сохранения исходной строки
      expect(stringified).toBe(original)
    })

    // Тест: проверка исключения параметра order=asc при круговом преобразовании
    test('круговой тест с order=asc исключается', () => {
      // Парсинг строки с order=asc
      const parsed = parseQuery('?q=test&order=asc')
      // Обратное преобразование в строку
      const stringified = stringifyQuery(parsed)
      // Проверка что order=asc был исключен из результата
      expect(stringified).toBe('q=test')
    })
  })
})





